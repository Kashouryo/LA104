var data = [380,360,320,420,300,400,300,400,340,420,280,400,340,400,320,400,300,420,300,420,300,420,300,3820,
700,380,740,360,720,400,720,380,700,380,720,400,700,400,680,400,700,420,680,420,700,360,720,400,
340,760,700,400,700,380,360,740,720,380,340,780,700,400,700,380,720,380,340,760,720,380,320,780,720,380,720,380,320,760,720,380,720,400,700,380,720,400,700,400,700,380,340,760,340,780,300,800,300,780,720,360,340,780,320,780,300,800,720,360,340,780,340,740,360,760,300,780,340,760,700,400,340,780,680,400,700,400,340,780,320,760,320,760,340,760,720,380,320,780,720,380,340,760,720,400,300,780,700,400,720,400,320,760,340,760,300];

data = data.map(x=>Math.floor((x+380/2)/380));
data.splice(0, 24);
//data = [data];

console.log(data.join(","));
/*
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,1,2,1,1,2,2,1,1,2,2,1,2,1,2,1,1,2,2,1,1,2,2,1,2,1,1,2,2,1,2,1,2,1,2
,1,2,1,2,1,1,2,1,2,1,2,1,2,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1,2,1,2,2,1,1,2,2,1,2,1,1,2,1,2,1,2,1,2,2,1,1,2,2,1,1,2,2,1,1,2,
2,1,2,1,1,2,1,2,1


01 10 01 00 10 11001011001001001011

l=1, r= , c=0, bits=   0
l=2, r=0, c=1, bits=   01 1
l=1, r=1, c=0, bits=0  01 10
l=2, r= , c=1, bits=01

001001001001001

*/

//data = [1,2,1] ; //,2,1,1,2,2,1,1,2,2,1,2]
var logic = 0;
var remainder = -1;
var bits = [];
for (var i=0; i<data.length; i+=2)
{
  var l0 = data[i];
  var l1 = data[i+1];
  if (l0==l1)
    throw "wrong sequence";
  bits.push(l0-1);
}

console.log(bits.length + " > " + bits.join(""));

var bs = bits.join("");
var bs1 = [];
while (bs.length >= 8)
{
  var sq = bs.substr(0,8);
  bs = bs.substr(8);
  bs1.push(sq)
}
//bs1 = bs1 + " " + bs;
bs1.push(bs);
console.log(bs1.join(" "));
console.log(bs1.map(x => ("0"+parseInt(x.split("").reverse().join(""), 2).toString(16)).substr(-2)).join(", "));


// 66 > 111111111111011010111010110111111000010001000001011000010101011000
// 11111111 11110110 10111010 11011111 10000100 01000001 01100001 01010110 00
// ff, f6, ba, df, 84, 41, 61, 56, 00

//#define ID_THGR810  0xf824
